[BITS 64]
	section .text
	global my_strcasecmp:function
	global casecmp
casecmp:
	cmp dil, 97
	jl return
	cmp dil, 122
	jg return
	sub dil, 32
return:
	ret

my_strcasecmp:
	xor rcx, rcx			; i = 0
	mov rdx, rdi			; save str1
	jmp check
loop:
	inc rcx				; i++
check:
	mov bl, byte [rdx + rcx]	; put str1[i] in rbx's first 8bits
	mov dil, bl
	call casecmp			; if (str1[i] >= 'a' && str1[i] <= 'z');
	mov bl, dil
	mov al, byte [rsi + rcx]	; put str2[i] in rax's first 8bits
	mov dil, al
	call casecmp			; if (str2[i] >= 'a' && str2[i] <= 'z');
	mov al, dil
case:
	cmp bl, al			; if (str1[i] == str2[i])
	je loop
which:
	xor rax, rax			; clean bits in rax
	xor rbx, rbx			; clean bits in rbx
	mov al, byte [rdx + rcx]	; put str1[i] in rax's first 8 bits
	mov bl, byte [rsi + rcx]	; put str2[i] in rbx's first 8 bits
	sub rax, rbx			; str1[i] -= str2[i]
	ret
